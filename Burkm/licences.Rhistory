# Welche Gruppe hat gefehlt? Wie viele Datenpunkte gab es für die Gruppe?
# (Keine explizite Antwort nötig, nur eine Überlegung.)
# Wir können auch die verschiedenen Maße der Streuung berechnen.
# In R gibt es oft verschiedene Möglichkeiten, etwas zu machen. Wir haben bisher
# Teile einer Datenmenge mit subset() rausgezogen, aber wir können das auch mit
# einer weiteren Syntax machen:
klinisch <- frauen[frauen$major == "M.A..Klinische.Linguistik",]
print(klinisch)
# Das sieht erstmal sehr verwirrend aus, ist es aber nicht. Die eckigen
# Klammern bestimmen die Auswahl an Elementen. Wir haben das ja bei Indizen in
# Vektoren schon gesehen. Man kann eigentlich Indizen oder logische
# Einschränkungen nutzen, und das gleiche gilt für Data Frames. Bei Data Frames
# haben wir zwei Dimensionen, Zeilen (rows) und Spalten (columns), daher das
# Komma. Vor dem Komma werden die Zeilen spezifiziert, nach dem Komma die
# Spalten. Wir wollen alle Spalten mitnehmen, deshalb haben wir nach dem Komma
# nichts. (Das Komma ist hier *sehr* wichtig -- wenn Sie das Komma weglassen,
# selegieren Sie einzelne Elemente statt Zeilen und bekommen dann später
# verwirrende Fehlermeldungen.)
# Jetzt brauchen wir die Teilmenge für die anderen beiden Studiengänge,
# Linguistik Kognition und Kommunikation und Speech Science
# HINT: wie sehen die Namen aus bzw. wie werden sie im data frame buchstabiert?
linkk <- frauen[frauen$major == "M.A..Linguistik.Kognition.und.Kommunikation",]
speech <- frauen[frauen$major == "M.A..Speech.Science",]
# Berechnen Sie -- ohne Hilfe von sd() -- die Standardabweichung für die Größe der drei
# Gruppen. Sie können auch weitere Zeilen hinzufügen, wenn es Ihnen so leichter
# ist.
# HINT: Formel und Beispiel für die Berechnung auf den Folien!
klinisch.sd <- klinisch$height - mean(klinisch$height)
linkk.sd <- linkk - mean(linkk$height)
speech.sd <- speech - mean(speech$height)
# Berichten Sie jetzt die Mittelwerte und Standardabweichungen für die drei Gruppen. Die erste Gruppe steht hier als Muster:
print( paste("Studiengang: Klinische Linguistik","Mean:",mean(klinisch$height),"SD:",klinisch.sd))
print( paste("Studiengang: Linguistik: Kognition und Kommunikation","Mean:",mean(linkk$height),"SD:",linkk.sd))
print( paste("Studiengang: Speech Science","Mean:",mean(speech$height),"SD:",speech.sd))
# Hausaufgabe 05
# Miriam Burk <Burkm@students.uni-marburg.de>
# 2014-05-02
# Dieses Werk ist lizenziert unter einer CC-BY-NC-SA Lizenz.
# Sie sollten die Datei auch in Ihren Ordner kopieren und einen Commit machen,
# bevor Sie die Kopie weiter anpassen! Vergessen Sie dabei nicht, Namen, Datum
# und ggf. Lizenz zu ändern. Um einiges leichter zu machen, sollten Sie auch die
# Datei body_dim_long.tab aus dem Data-Ordner kopieren, stagen und commiten. Sie
# müssen ggf. Ihr Arbeitsverzeichnis setzen, wenn R die .tab-Datei nicht finden
# kann:
# Session > Set Working Directory > Source File Location
# (Im folgenden müssen Sie die Code-Zeilen wieder aktiv setzen -- ich habe sie
# vorläufig auskommentiert, damit der Output beim ersten Beispiel sehr
# überschaubar war.)
# Am Dienstag haben wir uns ein paar Plots mit den Daten aus dem Fragebogen
# gemacht. Hier werden wir weiter üben.
# Zuerst müssen wir ggplot laden
library(ggplot2)
# und danach die Daten:
dat <- read.table("Burkm/body_dim_long.tab",header=TRUE)
# Wir haben im Kurs die Verteilung der Variabel weight angeschaut. In Skripten
# werden Ergebnisse nicht automatich dargestellt, sondern nur dann, wenn ein
# print Befehl genutzt wird. Dann müssten wir eigentlich den ganzen "ggplot() +
# ..." Befehl in die Klammer von print() einpacken, was nicht besonders lesbar
# ist. Wie bei anderen Berechnungen können wir den Output von ggplot einer
# Variabel zuweisen. Danach müssen wir nur den Variabelnamen in die Klammer von
# print() einpacken.
weight.grafik <- ggplot(data=dat, binwidth=50, aes(x=weight)) + geom_histogram(aes(y=..density..),fill="white",color="black") + geom_density()
print(weight.grafik)
# Wenn wir verschiedene Grafiken mit einem Datenzsatz machen möchten, ist es
# nervig, wenn wir den gemeinsamen Teil immer wieder eingeben müssen. Auch Teile
# von ggplot-Grafiken können einer Variabel zugewiesen werden:
weight.grafik.basis <- ggplot(data=dat,aes(x=weight))
print(weight.grafik.basis + geom_histogram())
print(weight.grafik.basis + geom_density())
# Wir haben auch mal die qplot()-Funktion gesehen. Sie ergibt eigentlich das
# Gleiche wie die "ggplot() + ..."-Befehle, hat nun eine andere Schnittstelle.
weight.grafik.alt <- qplot(x=weight,data=dat,geom="density")
print(weight.grafik.alt)
# Weil das Gleiche ergeben wird, können wir auch den Ouput von qplot() mit
# weiteren geom_XXXX() Funktionen erweitern.
weight.grafik.alt2 <- weight.grafik.alt + geom_histogram(aes(y=..density..),fill="white",color="black")
print(weight.grafik.alt2)
# Sie sehen an dieser Grafik auch, dass ggplot gestappelte Layers nutzt -- das
# Histogramm wird auf das Layer mit Dichte gestappelt und daher wird die
# Dichtekurve zum Teil versteckt. Wir können auch das Histogramm mit alpha
# transparenter machen.
weight.grafik.alt3 <- weight.grafik.alt + geom_histogram(aes(y=..density..),fill="white",color="black",alpha=0.65)
print(weight.grafik.alt3)
# ggplot hat auch eingebaute Untestützung für Box-Whisker-Plots, allerdings sind x und y jetzt anders:
weight.bw <- weight.grafik.basis + geom_boxplot(aes(x="weight",y=weight))
print(weight.bw)
# Sie sehen auch dabei, dass Layer-Asthetics Basis-Athetics brechen.
# Aber viel interessanter ist eben, wenn wir Gruppen unterscheiden. Dann können etwas machen wie BW-Plot nach Geschlecht:
weight.bw.sex <- weight.grafik.basis + geom_boxplot(aes(x=sex,y=weight))
print(weight.bw.sex)
# Und als Erinnerung können wir auch ähnliches mit der Dichte machen:
print( weight.grafik.basis + geom_density(aes(color=sex,fill=sex),alpha=0.5) )
# Aber jetzt haben wir uns Gewicht mehrmals angeschaut. Es wird Zeit, dass uns
# auch Größe anschauen. Sind die Studenten mancher Studiengänge größer als die anderen?
# Weil wir deutlich weniger Männer haben und es einen bekannten Unterschied in der Größe
# zwischen Männern und Frauen gibt, schließen wir erstmal die Männer aus:
frauen <- subset(dat, sex == "f")
# (Sie sollten sich wirklich überlegen, ob der Schritt "gut" ist. Haben wir
# dadurch unsre Ergebnisse verstellt? Sie müssen hier nichts schreiben, aber
# überlegen Sie sich wirklich, ob der Schritt sinnvoll war und was für Probeme
# er verursachen könnte. Sie könnten u.a. die folgenden Berechnungen und Plots
# zweimal machen und schauen, wie sich die Ergebnisse geändert haben.)
#Das erste, was wir machen, ist uns die Daten einfach als Box-Whisker-Diagramm
#darzustellen. (Box-Whisker zuerst, weil Sie das auch per Hand machen könnten,
#falls Sie unsicher sind, ob das Bild korrekt aussieht.) Hier und im Folgenden
#sollten Sie die Plots so machen, damit man einen Vergleich zwischen den Gruppen
#ziehen kann. Dafür gibt es verschiedene Möglichkeiten; die Wahl bleibt Ihnen
#überlassen.
frauen.studiengang.bw <- major.grafik.basis + geom_boxplot(aes(x="Studiengang", y=major))
print(frauen.studiengang.bw)
# Sehen die Studiengänge anders aus? Wir müssen hier noch relativ vorrsichtig
# sein, weil die Gruppen *unbalanziert* sind, d.h. die Gruppen sind
# unterschiedlich groß. Aber wie sieht der Vergleich auf den ersten Blick aus?
# (Keine explizite Antwort nötig, nur eine Überlegung.)
# Wir können natürlich auch die Dichte anschauen:
frauen.studiengang.dichte <- major.grafik.basis + geom_density(aes(color=major,fill=major))
print(frauen.studiengang.dichte)
# Haben Sie den gleichen Eindruck wie bei Box-Whisker bekommen? Unterscheiden
# sich die Gruppen?
# (Keine explizite Antwort nötig, nur eine Überlegung.)
# Welche Gruppe hat gefehlt? Wie viele Datenpunkte gab es für die Gruppe?
# (Keine explizite Antwort nötig, nur eine Überlegung.)
# Wir können auch die verschiedenen Maße der Streuung berechnen.
# In R gibt es oft verschiedene Möglichkeiten, etwas zu machen. Wir haben bisher
# Teile einer Datenmenge mit subset() rausgezogen, aber wir können das auch mit
# einer weiteren Syntax machen:
klinisch <- frauen[frauen$major == "M.A..Klinische.Linguistik",]
print(klinisch)
# Das sieht erstmal sehr verwirrend aus, ist es aber nicht. Die eckigen
# Klammern bestimmen die Auswahl an Elementen. Wir haben das ja bei Indizen in
# Vektoren schon gesehen. Man kann eigentlich Indizen oder logische
# Einschränkungen nutzen, und das gleiche gilt für Data Frames. Bei Data Frames
# haben wir zwei Dimensionen, Zeilen (rows) und Spalten (columns), daher das
# Komma. Vor dem Komma werden die Zeilen spezifiziert, nach dem Komma die
# Spalten. Wir wollen alle Spalten mitnehmen, deshalb haben wir nach dem Komma
# nichts. (Das Komma ist hier *sehr* wichtig -- wenn Sie das Komma weglassen,
# selegieren Sie einzelne Elemente statt Zeilen und bekommen dann später
# verwirrende Fehlermeldungen.)
# Jetzt brauchen wir die Teilmenge für die anderen beiden Studiengänge,
# Linguistik Kognition und Kommunikation und Speech Science
# HINT: wie sehen die Namen aus bzw. wie werden sie im data frame buchstabiert?
linkk <- frauen[frauen$major == "M.A..Linguistik.Kognition.und.Kommunikation",]
speech <- frauen[frauen$major == "M.A..Speech.Science",]
# Berechnen Sie -- ohne Hilfe von sd() -- die Standardabweichung für die Größe der drei
# Gruppen. Sie können auch weitere Zeilen hinzufügen, wenn es Ihnen so leichter
# ist.
# HINT: Formel und Beispiel für die Berechnung auf den Folien!
klinisch.sd <- klinisch$height - mean(klinisch$height)
linkk.sd <- linkk - mean(linkk$height)
speech.sd <- speech - mean(speech$height)
# Berichten Sie jetzt die Mittelwerte und Standardabweichungen für die drei Gruppen. Die erste Gruppe steht hier als Muster:
print( paste("Studiengang: Klinische Linguistik","Mean:",mean(klinisch$height),"SD:",klinisch.sd))
print( paste("Studiengang: Linguistik: Kognition und Kommunikation","Mean:",mean(linkk$height),"SD:",linkk.sd))
print( paste("Studiengang: Speech Science","Mean:",mean(speech$height),"SD:",speech.sd))
source('~/Statistik-f-r-Sprachwissenschaftler/Burkm/050514.R')
# ggplot laden
library(ggplot2)
# Daten auslesen
rtdata <- read.table("Burkm/priming.tab",header=TRUE)
rt.zentriert <- rtdata$RT - mean(rtdata$RT)
rt.z2 <- scale(rtdata$RT)
source.with.encoding('~/Statistik-f-r-Sprachwissenschaftler/Burkm/050514.R', encoding='UTF-8')
# ggplot laden
library(ggplot2)
# Daten auslesen
rtdata <- read.table("Burkm/priming.tab",header=TRUE)
rt.zentriert <- rtdata$RT - mean(rtdata$RT)
print(rt.zentriert)
# Über Funktion:
rt.z2 <- scale(rtdata$RT)
print(rt.z2)
0,01*0,02
0,1*0,2
0.1*0.2
0.1/0.2
qnorm(0.95)
install.packages("reshape2")
install.packages("reshape2")
install.packages("reshape2")
install.packages("reshape2")
install.packages("reshape2")
install.packages("reshape2")
install.packages("reshape2")
install.packages("reshape2")
% Hausaufgabe 07
% Miriam Burk <Burkm@students.uni-marburg.de>
% 2014-05-08
#Falls die Umlaute in dieser und anderen Dateien nicht korrekt dargestellt werden, sollten Sie File > Reopen with Encoding > UTF-8 sofort machen (und auf jeden Fall ohne davor zu speichern), damit die Enkodierung korrekt erkannt wird!
```{r, echo=FALSE}
# citations with R -- kinda like BibTeX!
suppressPackageStartupMessages(library(knitcitations))
```
# Die nächsten Punkte sollten langsam automatisch sein...
#1. Kopieren Sie diese Datei in Ihren Ordner (das können Sie innerhalb RStudio machen oder mit Explorer/Finder/usw.) und öffnen Sie die Kopie. Ab diesem Punkt arbeiten Sie mit der Kopie. Die Kopie bitte `hausaufgabe07.Rmd` nennen und nicht `Kopie...`
#2. Sie sehen jetzt im Git-Tab, dass der neue Ordner als unbekannt (mit gelbem Fragezeichen) da steht. Geben Sie Git Bescheid, dass Sie die Änderungen im Ordner verfolgen möchten (auf Stage klicken). Die neue Datei steht automatisch da.
#3. Machen Sie ein Commit mit den bisherigen Änderungen (schreiben Sie eine sinnvolle Message dazu -- sinnvoll bedeutet nicht unbedingt lang) und danach einen Push.
#4. Ersetzen Sie meinen Namen oben mit Ihrem. Klicken auf Stage, um die Änderung zu merken.
#5. Ändern Sie das Datum auf heute. (Seien Sie ehrlich! Ich kann das sowieso am Commit sehen.)
#6. Sie sehen jetzt, dass es zwei Symbole in der Status-Spalte gibt, eins für den Zustand im *Staging Area* (auch als *Index* bekannt), eins für den Zustand im Vergleich zum Staging Area. Sie haben die Datei modifiziert, eine Änderung in das Staging Area aufgenommen, und danach weitere Änderungen gemacht. Nur Änderungen im Staging Area werden in den Commit aufgenommen.
#7. Stellen Sie die letzten Änderungen auch ins Staging Area und machen Sie einen Commit (immer mit sinnvoller Message!).
#8. Vergessen Sie nicht am Ende, die Lizenz ggf. zu ändern!
# Verteilung von Noten
#An der Uni Marburg nutzen wir 15 Punkte als Benotungskala (*Notenpunkte*). Wir nehmen an, dass der Mittelwert 8 NP (=3 im üblichen 1-5 System, was eigentlich einem durchschnittlichen Verständnis des Stoffes entsprechen soll) ist. Wie sieht dann die Verteilung der Noten aus? Wir müssen uns noch überlegen, was eine sinnvolle Standardabweichung für die Noten wäre. Vielleicht ist am leichtesten, wenn wir einfach ein paar ausprobieren und plotten. Wir fangen mit $\sigma = 3,4,5$ an. Das entspricht 1, 1.5, 2 Noten auf der 1-5 Skala.
```{r}
noten <- 1:15
mu <- 8
drei <- dnorm(noten,mean=mu,sd=3)
vier <- dnorm(noten,mean=mu,sd=4)
fuenf <- dnorm(noten,mean=mu,sd=5)
noten.dist <- data.frame(Notenpunkte=noten,drei,vier,fuenf)
noten.dist
```
#Die Daten sind im sog. **wide format** (*breiten Format*), weil die verschiedenen Stufen einer Variable (hier: simulierte Standardabweichung) "breit", d.h. über mehrere Spalten hinweg, dargestellt werden. Obwohl viele es als "natürlich" betrachten, ist dieses Format in R nicht bevorzugt. Unter anderem haben wir hier mehrere Beobachtungen pro Zeile, was aus der Perspektive der Statistik ein bisschen durcheinander ist. R (und die Mathematik, die R Ihnen abnimmt) bevorzugt sog. **long format** (*langes Format*), wo es eine Beobachtung pro Zeile gibt. In diesem Format gibt es dann bei unserem Beispiel eine weitere Spalte "Standardabweichung" und die drei verschiedenen beobachteten Messwerte werden zusammen in eine Spalte gepackt. Das Paket `reshape2` bietet ein paar Hilfsfunktionen an, die das Umformatieren viel leichter machen. (Es gibt auch das Paket `reshape` vom selben Autor, das auch ähnliches macht. `reshape2` hat ein paar Verbesserungen eingeführt, die nicht ganz rückwärts kompatibel sind.)
#Die Funktion heißt `melt()` (*schmelzen*) aus der Analogie zu Schmieden, wo die Daten (der Rohstoff) in eine schmiedbare bzw. flüssige Form gebracht werden. Aus dem Long-Format kann man ggf. die Daten in andere Formate mit `cast()` (*gießen*) konvertieren.
```{r}
library(reshape2)
# value.name is the name of the new column with the values that were previously spread out over several columns
# variable.name is the name of the new column with the old column names
melt(noten.dist,id.vars="Notenpunkte",value.name="P",variable.name="Standardabweichung")
```
#Wir müssen den Output von `melt()` natürlich einer Variable zuweisen. Wir können die Ausgangsvariable "überschreiben":
```{r}
noten.dist <- melt(noten.dist,id.vars="Notenpunkte",value.name="P",variable.name="Standardabweichung")
```
#Das funktioniert, weil alles rechts von `<-` zuerst gemacht wird. *Die Zuweisung findet erst nach der Evaluation der rechten Seite statt!* Jetzt können wir alle drei Verteilungen mit einem `ggplot`-Befehl grafisch darstellen.
```{r}
library(ggplot2)
# we use geom_line() because dnorm() already gave us the densities!
# we onle use geom_density() when ggplot should calculate the density for us
ggplot(data=noten.dist,aes(x=Notenpunkte,y=P,color=Standardabweichung)) + geom_line() + scale_x_continuous(limits=c(0,16))
```
#Ich habe die Grenzen der Grafik ein bisschen breiter gestellt, sodass man die Endpunkte klar sieht und Sie auch einen weiteren `ggplot`-Befehl kennen lernen.
#Welche Verteilung sieht am fairsten aus? Warum?
Wir können das konkreter machen: welcher Anteil der Studenten bekommt bei den jeweiligen Verteilungen eine 1 (zumindest 13 NP)? Für die Verteilung mit $\sigma = 3$ sieht die Berechnung mit R so aus:
```{r}
pnorm(13,mean=mu,sd=3,lower.tail=FALSE)
```
Oder vielleicht interessiert uns der Anteil der Durchgefallenen (< 5NP):
```{r}
pnorm(5,mean=mu,sd=3)
```
Wenn wir das für alle drei Gruppen wiederholen möchten, ist es ziemlich ärgerlich, wenn wir jede Gruppe einzeln eingeben müssen. Dafür können wir eine **`for`-Schleife** nutzen:
```{r}
for(s in c(3,4,5) ){
durchfall <- pnorm(5,mean=mu,sd=s)
output <- paste("Bei einer Standabweichung von",s, "fallen",durchfall*100,"% durch.")
print(output)
}
```
Aber wir hoffen alle, dass wir doch eine gute Note bekommen. Fügen Sie einen Code-Block hier ein, der das gleiche aber mit "ausgezeichneten" Noten (=1 bzw. >= 13) macht. (Bei evtl. Copy-Paste nicht vergessen, "fallen...durch" durch etwas Passendes zu ersetzen!)
code_block_hier
Wie steht die Anzahl guter Noten in Beziehung zur Anzahl schlechter Noten?
antwort_hier
Warum?
antwort_hier
## Kurtosis und Schiefe
Kurtosis (im Deutschen auch *Wölbung*) ist ein Maß dafür, wie spitz eine Verteilung ist. Die Normalverteilung wird nie zu extrem spitz -- der Gipfel bleibt immer schön rund, obwohl er manchmal eng wird. Andere Verteilungen (z.B. die Laplace-Verteilung ) haben Gipfel, die nicht rund sind.
Schiefe (*skewness*) beschriebt die (A)Symmetrie einer Verteilung. Eine Verteilung ist *linksschief*, wenn die linke Seite "breiter" ist, d.h., wenn sich der "Gipfel" auf der rechten Seite befindet.  Eine Verteilung ist *rechtsschief*, wenn die rechte Seite "breiter" ist, d.h., wenn sich der "Gipfel" auf der linken Seite befindet
Die Verteilung von Noten ist oft schief mit mehr guten Noten. Ist die Verteilung rechts- oder linksschief?
antwort_hier
Vielleicht hilft folgende Grafik mit der Visualisierung:
```{r echo=FALSE}
suppressPackageStartupMessages(library(sn))
qplot(x=1:15,y=dsn(1:15, xi=c(12), omega=1, alpha=-3, log=FALSE),geom="line",xlab="Notenpunkte",ylab="P")
```
## Von Perzentilen auf Häufikgeiten
Wir können die Perzentile in (absolute) Häufigkeiten übersetzen. Nehmen wir an, dass es 50 Studenten in einem Kurs gibt und dass die Noten wie oben normal verteilt sind. Dann können wir unserem Data.Frame eine weitere Spalte hinzufügen:
```{r}
n <- 50
noten.dist$Anzahl <- noten.dist$P * n
noten.dist
```
Jetzt können wir die absoluten Häufigkeiten auch plotten:
code_block_hier
Beantworten Sie ein paar Fragen über die Verteilung, indem Sie den passenden R-Code einsetzen:
1. Wie viele Studenten bekommen zwischen 7 und 9 NP bei einer Standardabweichung von 3?
`r (pnorm(9,mean=mu,sd=3) - pnorm(7,mean=mu,sd=3) ) * n` Studenten bekommen zwischen 7 und 9 Notenpunkten.
Wichtig: bei Wahrscheinlichkeits- und Häufigkeitsverteilung ist der linke Rand inklusiv aber der rechte Rand exklusiv! Das heißt, wir zählen hiermit die Leute, die bis zu 9 NP bekommen haben aber nicht die, die tatsächlich 9 NP bekommen haben!
2. Wie viele Studenten bekommen zumindest 10 NP?
`code_hier` Studenten bekommen zumindest 10 Notenpunkte.
3. Wie viele Studenten bekommen weniger als 10 NP?
`code_hier` Studenten bekommen weniger als 10 Notenpunkte.
4. Wie viele Studenten bekommen weniger als 8 NP?
`code_hier` Studenten bekommen weniger als 8 Notenpunkte.
(Die Einrückung mit 4 Leerschlägen ist die Syntax für mehrere Absätze pro Punkt auf der Liste.)
## Von Noten zu Perzentilen -- ich möchte mich den anderen überlegen fühlen!
Manchmal will man in die andere Richtung gehen -- z.B. um die Frage beantworten zu können, welche Note man erreichen muss, um überdurchschnittlich zu sein. Dafür haben wir `qnorm()`. Überdurchschnittlich heißt "besser als die Hälfte abscheiden" (duh!) und wir nehmen wieder an, dass die Standardabweichung gleich 3 ist. Dann haben wir die Aussage:
Um überdurchschnittlich zu sein, muss man mehr als `r qnorm(0.5,mean=mu,sd=3)` Notenpunkte bekommen.
Nicht so überraschend, dass "überdurchschnittlich" auch "mehr Punkte als den Durchschnitt bekommen" heißt! Wie sieht es aus, wenn wir besser als 99% der anderen abschließen möchten?
Um in dem besten 1% abzuschließen, muss man zumindest `code_hier` Notenpunkte bekommen.
## z-Transformation
Bei der Überprüfung der Lehrqualität scheint es der Verwaltung, dass ein gewisser Dozent andere Noten als andere Dozenten vergibt. Es wird entschieden, dass der Notenspiegel bei den Teilnehmern in einem von seinen Kursen getestet wird, um zu schauen, ob er sich von signifikant von der idealisierten Notenverteilung ($\mu=8,\sigma=3$) unterscheidet. Um zu zeigen, dass Gott $\alpha=0.06$ so viel liebt wie $\alpha=0.05$ `r citep("10.1037/0003-066X.44.10.1276")`, setzt die Verwaltung das Signikanzniveau auf 0.06.
Der kritische Wert für einen einseitigen $z$-Test ist `code_hier`.
Die kritischen Werte für einen zweiseitigen $z$-Test sind $\pm$`code_hier`.
### Gibt es einen Unterschied?
Bei diesem Dozenten ist die Verwaltung wirklich unsicher, ob und was für einen Unterschied es geben könnte. (Welche Testart sollte man hier nutzen?)
In einem kleinen Seminar mit 7 Studenten beträgt der Durchschnittswert 10. Unterscheidet sich der Notenspiegel von dem idealen? Berechnen Sie den $z$-Test:
code_hier
Das ist ein **_eins_von_signifikanter_insignifikanter_** Unterschied.
In einer Vorlesung vom selben Dozenten mit 50 Teilnehmern beträgt der Durchschnittswert wieder 10. (Es scheint, dass der Dozent 10 besonders toll findet.) Berechnen Sie den $z$-Test:
code_hier
Das ist ein **_eins_von_signifikanter_insignifikanter_** Unterschied.
Ist die Benotung vom Dozenten weniger als ideal?
### Ein anderer, böserer? Dozent
Die Verwaltung ist auch auf einen anderen Dozenten aufmerksam geworden, weil manche Studenten behaupten, er würde zu streng benoten. (Welche Testart sollte man hier nutzen?)
In einem mittelgroßen Seminar mit 20 Studenten beträgt der Durchschnittswert 7. Der Dozent sagt, dass das wunderbar nah am Erwartungswert (8) ist, und dass man ihn in Ruhe lassen sollte. Ist er zu streng?
Berechnen Sie den $z$-Test:
code_hier
Das ist ein **_eins_von_signifikanter_insignifikanter_** Unterschied.
Später ergibt sich, dass es eigentlich 25 Studenten im Kurs gab. (Der Dozent hat "einen Tippfehler" gemacht, als er seine Teilnehmerzahl per Mail an die Verwaltung geschickt hat.) Der Durchschnittswert bleibt -- behauptet der Dozent -- immer noch bei 7. Er behauptet weiterhin, dass das wunderbar nah am Erwartungswert (8) ist, und dass man ihn in Ruhe lassen sollte. Ist er zu streng?
Berechnen Sie den $z$-Test:
code_hier
Das ist ein **_eins_von_signifikanter_insignifikanter_** Unterschied.
## Zum Überlegen
Gibt es einen Grund, weshalb die Noten normal verteilt sein sollten? Warum ist das die übliche Annahme?
# Bibliografie
```{r, echo=FALSE,results='asis'}
bibliography()
```
# Lizenz
Dieses Werk ist lizenziert unter einer CC-BY-NC-SA Lizenz.
```{r}
for(s in c(3,4,5) ){
durchfall <- pnorm(13,mean=mu,sd=3)
output <- paste("Bei einer Standabweichung von",s, "fallen",durchfall*100,"% durch.")
print(output)
}
```
```{r}
for(s in c(13,14,15) ){
einser <- pnorm(5,mean=mu,sd=s)
output <- paste("Bei einer Standabweichung von",s, "bestehen",einser*100,"% mit einer 1.")
print(output)
}
```
```{r}
for(s in c(3,4,5) ){
durchfall <- pnorm(13,mean=8,sd=3)
output <- paste("Bei einer Standabweichung von",s, "fallen",durchfall*100,"% durch.")
print(output)
}
```{r}
for(s in c(13,14,15) ){
einser <- pnorm(5,mean=8,sd=s)
output <- paste("Bei einer Standabweichung von",s, "bestehen",einser*100,"% mit einer 1.")
print(output)
}
```
```{r}
for(s in c(13,14,15) ){
einser <- pnorm(5,mean=8,sd=15)
output <- paste("Bei einer Standabweichung von",s, "bestehen",einser*100,"% mit einer 1.")
print(output)
}
% Hausaufgabe 07
% Miriam Burk <Burkm@students.uni-marburg.de>
% 2014-05-08
#Falls die Umlaute in dieser und anderen Dateien nicht korrekt dargestellt werden, sollten Sie File > Reopen with Encoding > UTF-8 sofort machen (und auf jeden Fall ohne davor zu speichern), damit die Enkodierung korrekt erkannt wird!
```{r, echo=FALSE}
# citations with R -- kinda like BibTeX!
suppressPackageStartupMessages(library(knitcitations))
```
# Die nächsten Punkte sollten langsam automatisch sein...
#1. Kopieren Sie diese Datei in Ihren Ordner (das können Sie innerhalb RStudio machen oder mit Explorer/Finder/usw.) und öffnen Sie die Kopie. Ab diesem Punkt arbeiten Sie mit der Kopie. Die Kopie bitte `hausaufgabe07.Rmd` nennen und nicht `Kopie...`
#2. Sie sehen jetzt im Git-Tab, dass der neue Ordner als unbekannt (mit gelbem Fragezeichen) da steht. Geben Sie Git Bescheid, dass Sie die Änderungen im Ordner verfolgen möchten (auf Stage klicken). Die neue Datei steht automatisch da.
#3. Machen Sie ein Commit mit den bisherigen Änderungen (schreiben Sie eine sinnvolle Message dazu -- sinnvoll bedeutet nicht unbedingt lang) und danach einen Push.
#4. Ersetzen Sie meinen Namen oben mit Ihrem. Klicken auf Stage, um die Änderung zu merken.
#5. Ändern Sie das Datum auf heute. (Seien Sie ehrlich! Ich kann das sowieso am Commit sehen.)
#6. Sie sehen jetzt, dass es zwei Symbole in der Status-Spalte gibt, eins für den Zustand im *Staging Area* (auch als *Index* bekannt), eins für den Zustand im Vergleich zum Staging Area. Sie haben die Datei modifiziert, eine Änderung in das Staging Area aufgenommen, und danach weitere Änderungen gemacht. Nur Änderungen im Staging Area werden in den Commit aufgenommen.
#7. Stellen Sie die letzten Änderungen auch ins Staging Area und machen Sie einen Commit (immer mit sinnvoller Message!).
#8. Vergessen Sie nicht am Ende, die Lizenz ggf. zu ändern!
# Verteilung von Noten
#An der Uni Marburg nutzen wir 15 Punkte als Benotungskala (*Notenpunkte*). Wir nehmen an, dass der Mittelwert 8 NP (=3 im üblichen 1-5 System, was eigentlich einem durchschnittlichen Verständnis des Stoffes entsprechen soll) ist. Wie sieht dann die Verteilung der Noten aus? Wir müssen uns noch überlegen, was eine sinnvolle Standardabweichung für die Noten wäre. Vielleicht ist am leichtesten, wenn wir einfach ein paar ausprobieren und plotten. Wir fangen mit $\sigma = 3,4,5$ an. Das entspricht 1, 1.5, 2 Noten auf der 1-5 Skala.
```{r}
noten <- 1:15
mu <- 8
drei <- dnorm(noten,mean=mu,sd=3)
vier <- dnorm(noten,mean=mu,sd=4)
fuenf <- dnorm(noten,mean=mu,sd=5)
noten.dist <- data.frame(Notenpunkte=noten,drei,vier,fuenf)
noten.dist
```
#Die Daten sind im sog. **wide format** (*breiten Format*), weil die verschiedenen Stufen einer Variable (hier: simulierte Standardabweichung) "breit", d.h. über mehrere Spalten hinweg, dargestellt werden. Obwohl viele es als "natürlich" betrachten, ist dieses Format in R nicht bevorzugt. Unter anderem haben wir hier mehrere Beobachtungen pro Zeile, was aus der Perspektive der Statistik ein bisschen durcheinander ist. R (und die Mathematik, die R Ihnen abnimmt) bevorzugt sog. **long format** (*langes Format*), wo es eine Beobachtung pro Zeile gibt. In diesem Format gibt es dann bei unserem Beispiel eine weitere Spalte "Standardabweichung" und die drei verschiedenen beobachteten Messwerte werden zusammen in eine Spalte gepackt. Das Paket `reshape2` bietet ein paar Hilfsfunktionen an, die das Umformatieren viel leichter machen. (Es gibt auch das Paket `reshape` vom selben Autor, das auch ähnliches macht. `reshape2` hat ein paar Verbesserungen eingeführt, die nicht ganz rückwärts kompatibel sind.)
#Die Funktion heißt `melt()` (*schmelzen*) aus der Analogie zu Schmieden, wo die Daten (der Rohstoff) in eine schmiedbare bzw. flüssige Form gebracht werden. Aus dem Long-Format kann man ggf. die Daten in andere Formate mit `cast()` (*gießen*) konvertieren.
```{r}
library(reshape2)
# value.name is the name of the new column with the values that were previously spread out over several columns
# variable.name is the name of the new column with the old column names
melt(noten.dist,id.vars="Notenpunkte",value.name="P",variable.name="Standardabweichung")
```
#Wir müssen den Output von `melt()` natürlich einer Variable zuweisen. Wir können die Ausgangsvariable "überschreiben":
```{r}
noten.dist <- melt(noten.dist,id.vars="Notenpunkte",value.name="P",variable.name="Standardabweichung")
```
#Das funktioniert, weil alles rechts von `<-` zuerst gemacht wird. *Die Zuweisung findet erst nach der Evaluation der rechten Seite statt!* Jetzt können wir alle drei Verteilungen mit einem `ggplot`-Befehl grafisch darstellen.
```{r}
library(ggplot2)
# we use geom_line() because dnorm() already gave us the densities!
# we onle use geom_density() when ggplot should calculate the density for us
ggplot(data=noten.dist,aes(x=Notenpunkte,y=P,color=Standardabweichung)) + geom_line() + scale_x_continuous(limits=c(0,16))
```
#Ich habe die Grenzen der Grafik ein bisschen breiter gestellt, sodass man die Endpunkte klar sieht und Sie auch einen weiteren `ggplot`-Befehl kennen lernen.
#Welche Verteilung sieht am fairsten aus? Warum?
#Wir können das konkreter machen: welcher Anteil der Studenten bekommt bei den jeweiligen Verteilungen eine 1 (zumindest 13 NP)? Für die Verteilung mit $\sigma = 3$ sieht die Berechnung mit R so aus:
```{r}
pnorm(13,mean=mu,sd=3,lower.tail=FALSE)
```
#Oder vielleicht interessiert uns der Anteil der Durchgefallenen (< 5NP):
```{r}
pnorm(5,mean=mu,sd=3)
```
#Wenn wir das für alle drei Gruppen wiederholen möchten, ist es ziemlich ärgerlich, wenn wir jede Gruppe einzeln eingeben müssen. Dafür können wir eine **`for`-Schleife** nutzen:
```{r}
for(s in c(3,4,5) ){
durchfall <- pnorm(13,mean=mu,sd=3)
output <- paste("Bei einer Standabweichung von",s, "fallen",durchfall*100,"% durch.")
print(output)
}
```
#Aber wir hoffen alle, dass wir doch eine gute Note bekommen. Fügen Sie einen Code-Block hier ein, der das gleiche aber mit "ausgezeichneten" Noten (=1 bzw. >= 13) macht. (Bei evtl. Copy-Paste nicht vergessen, "fallen...durch" durch etwas Passendes zu ersetzen!)
```{r}
for(s in c(13,14,15) ){
einser <- pnorm(5,mean=mu,sd=s)
output <- paste("Bei einer Standabweichung von",s, "bestehen",einser*100,"% mit einer 1.")
print(output)
}
```
Wie steht die Anzahl guter Noten in Beziehung zur Anzahl schlechter Noten?
Gute Noten sind seltener als schlechte Noten.
Warum?
Vermutlich weil der beobachtete Bereich der schlechten Noten größer ist als der beobachtete Bereich für die guten Noten (5 NP vs. 3 NP). Geht man von einer Normalverteilung aus, müssten beide Enden jeweils im Vergleich zur Mitte weniger Werte aufweisen als diese.
## Kurtosis und Schiefe
Kurtosis (im Deutschen auch *Wölbung*) ist ein Maß dafür, wie spitz eine Verteilung ist. Die Normalverteilung wird nie zu extrem spitz -- der Gipfel bleibt immer schön rund, obwohl er manchmal eng wird. Andere Verteilungen (z.B. die Laplace-Verteilung ) haben Gipfel, die nicht rund sind.
Schiefe (*skewness*) beschriebt die (A)Symmetrie einer Verteilung. Eine Verteilung ist *linksschief*, wenn die linke Seite "breiter" ist, d.h., wenn sich der "Gipfel" auf der rechten Seite befindet.  Eine Verteilung ist *rechtsschief*, wenn die rechte Seite "breiter" ist, d.h., wenn sich der "Gipfel" auf der linken Seite befindet
Die Verteilung von Noten ist oft schief mit mehr guten Noten. Ist die Verteilung rechts- oder linksschief?
In diesem Falle würde ich sagen rechtsschief.
Vielleicht hilft folgende Grafik mit der Visualisierung:
```{r echo=FALSE}
suppressPackageStartupMessages(library(sn))
qplot(x=1:15,y=dsn(1:15, xi=c(12), omega=1, alpha=-3, log=FALSE),geom="line",xlab="Notenpunkte",ylab="P")
```
## Von Perzentilen auf Häufikgeiten
Wir können die Perzentile in (absolute) Häufigkeiten übersetzen. Nehmen wir an, dass es 50 Studenten in einem Kurs gibt und dass die Noten wie oben normal verteilt sind. Dann können wir unserem Data.Frame eine weitere Spalte hinzufügen:
```{r}
n <- 50
noten.dist$Anzahl <- noten.dist$P * n
noten.dist
```
Jetzt können wir die absoluten Häufigkeiten auch plotten:
code_block_hier
Beantworten Sie ein paar Fragen über die Verteilung, indem Sie den passenden R-Code einsetzen:
1. Wie viele Studenten bekommen zwischen 7 und 9 NP bei einer Standardabweichung von 3?
`r (pnorm(9,mean=mu,sd=3) - pnorm(7,mean=mu,sd=3) ) * n` Studenten bekommen zwischen 7 und 9 Notenpunkten.
Wichtig: bei Wahrscheinlichkeits- und Häufigkeitsverteilung ist der linke Rand inklusiv aber der rechte Rand exklusiv! Das heißt, wir zählen hiermit die Leute, die bis zu 9 NP bekommen haben aber nicht die, die tatsächlich 9 NP bekommen haben!
2. Wie viele Studenten bekommen zumindest 10 NP?
`code_hier` Studenten bekommen zumindest 10 Notenpunkte.
3. Wie viele Studenten bekommen weniger als 10 NP?
`code_hier` Studenten bekommen weniger als 10 Notenpunkte.
4. Wie viele Studenten bekommen weniger als 8 NP?
`code_hier` Studenten bekommen weniger als 8 Notenpunkte.
(Die Einrückung mit 4 Leerschlägen ist die Syntax für mehrere Absätze pro Punkt auf der Liste.)
## Von Noten zu Perzentilen -- ich möchte mich den anderen überlegen fühlen!
Manchmal will man in die andere Richtung gehen -- z.B. um die Frage beantworten zu können, welche Note man erreichen muss, um überdurchschnittlich zu sein. Dafür haben wir `qnorm()`. Überdurchschnittlich heißt "besser als die Hälfte abscheiden" (duh!) und wir nehmen wieder an, dass die Standardabweichung gleich 3 ist. Dann haben wir die Aussage:
Um überdurchschnittlich zu sein, muss man mehr als `r qnorm(0.5,mean=mu,sd=3)` Notenpunkte bekommen.
Nicht so überraschend, dass "überdurchschnittlich" auch "mehr Punkte als den Durchschnitt bekommen" heißt! Wie sieht es aus, wenn wir besser als 99% der anderen abschließen möchten?
Um in dem besten 1% abzuschließen, muss man zumindest `code_hier` Notenpunkte bekommen.
## z-Transformation
Bei der Überprüfung der Lehrqualität scheint es der Verwaltung, dass ein gewisser Dozent andere Noten als andere Dozenten vergibt. Es wird entschieden, dass der Notenspiegel bei den Teilnehmern in einem von seinen Kursen getestet wird, um zu schauen, ob er sich von signifikant von der idealisierten Notenverteilung ($\mu=8,\sigma=3$) unterscheidet. Um zu zeigen, dass Gott $\alpha=0.06$ so viel liebt wie $\alpha=0.05$ `r citep("10.1037/0003-066X.44.10.1276")`, setzt die Verwaltung das Signikanzniveau auf 0.06.
Der kritische Wert für einen einseitigen $z$-Test ist `code_hier`.
Die kritischen Werte für einen zweiseitigen $z$-Test sind $\pm$`code_hier`.
### Gibt es einen Unterschied?
Bei diesem Dozenten ist die Verwaltung wirklich unsicher, ob und was für einen Unterschied es geben könnte. (Welche Testart sollte man hier nutzen?)
In einem kleinen Seminar mit 7 Studenten beträgt der Durchschnittswert 10. Unterscheidet sich der Notenspiegel von dem idealen? Berechnen Sie den $z$-Test:
code_hier
Das ist ein **_eins_von_signifikanter_insignifikanter_** Unterschied.
In einer Vorlesung vom selben Dozenten mit 50 Teilnehmern beträgt der Durchschnittswert wieder 10. (Es scheint, dass der Dozent 10 besonders toll findet.) Berechnen Sie den $z$-Test:
code_hier
Das ist ein **_eins_von_signifikanter_insignifikanter_** Unterschied.
Ist die Benotung vom Dozenten weniger als ideal?
### Ein anderer, böserer? Dozent
Die Verwaltung ist auch auf einen anderen Dozenten aufmerksam geworden, weil manche Studenten behaupten, er würde zu streng benoten. (Welche Testart sollte man hier nutzen?)
In einem mittelgroßen Seminar mit 20 Studenten beträgt der Durchschnittswert 7. Der Dozent sagt, dass das wunderbar nah am Erwartungswert (8) ist, und dass man ihn in Ruhe lassen sollte. Ist er zu streng?
Berechnen Sie den $z$-Test:
code_hier
Das ist ein **_eins_von_signifikanter_insignifikanter_** Unterschied.
Später ergibt sich, dass es eigentlich 25 Studenten im Kurs gab. (Der Dozent hat "einen Tippfehler" gemacht, als er seine Teilnehmerzahl per Mail an die Verwaltung geschickt hat.) Der Durchschnittswert bleibt -- behauptet der Dozent -- immer noch bei 7. Er behauptet weiterhin, dass das wunderbar nah am Erwartungswert (8) ist, und dass man ihn in Ruhe lassen sollte. Ist er zu streng?
Berechnen Sie den $z$-Test:
code_hier
Das ist ein **_eins_von_signifikanter_insignifikanter_** Unterschied.
## Zum Überlegen
Gibt es einen Grund, weshalb die Noten normal verteilt sein sollten? Warum ist das die übliche Annahme?
# Bibliografie
```{r, echo=FALSE,results='asis'}
bibliography()
```
# Lizenz
Dieses Werk ist lizenziert unter einer CC-BY-NC-SA Lizenz.
install.packages("knitcitations")
- $p$-Werte
install.packages("ggplot2")
install.packages("reshape")
install.packages(c("plyr", "languageR", "sn"))
install.packages(c("plyr", "languageR", "sn"))
install.packages(c("plyr", "languageR", "sn"))
install.packages(c("plyr", "languageR", "sn"))
library ('ggplot2')
install.packages(c("reshape", "reshape2"))
library("ggplot2", lib.loc="C:/Users/Miriam/Documents/R/win-library/3.1")
library("reshape2", lib.loc="C:/Users/Miriam/Documents/R/win-library/3.1")
detach("package:reshape2", unload=TRUE)
detach("package:ggplot2", unload=TRUE)
savehistory("~/Statistik-f-r-Sprachwissenschaftler/Burkm/licences.Rhistory")
